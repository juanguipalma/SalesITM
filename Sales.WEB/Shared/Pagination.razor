<nav>
<ul class="pagination">
    @foreach (var link in Links)
        {
        <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
            @if (link.Text.Equals("Anterior") || link.Text.Equals("Siguiente"))
            {<a class="page-link" style="width: 85px">@link.Text</a> }
        else
        {
            {<a class="page-link" style="width: 45px">@link.Text</a>}
        }
        </li>
    }
</ul>
</nav>

@code {
            [Parameter] public int CurrentPage { get; set; } = 1;
            [Parameter] public int TotalPages { get; set; }
            [Parameter] public int Radio { get; set; } = 10;
            [Parameter] public EventCallback<int> SelectedPage { get; set; }
            List<PageModel> Links = new();

            private async Task InternalSelectedPage(PageModel pageModel)
            {
                if (pageModel.Page == CurrentPage || pageModel.Page == 0)
                {
                    return;
                }

                await SelectedPage.InvokeAsync(pageModel.Page);
            }

    protected override void OnParametersSet()
        {
            Links = new List<PageModel>();
            var previousLinkEnable = CurrentPage != 1;
            var previousLinkPage = CurrentPage - 1;

            AddPageModelToList("Anterior", previousLinkPage, previousLinkEnable);

            for (int i = 1; i <= TotalPages; i++)
            {
                if (TotalPages <= Radio)
                {
                    AddPageModelToList(i.ToString(), i, CurrentPage == i);
                }

                if (TotalPages > Radio && i <= Radio && CurrentPage <= Radio)
                {
                    AddPageModelToList(i.ToString(), i, CurrentPage == i);
                }

                if (CurrentPage > Radio && i > CurrentPage - Radio && i <= CurrentPage)
                {
                    AddPageModelToList(i.ToString(), i, CurrentPage == i);
                }
            }


            var linkNextEnable = CurrentPage != TotalPages;
            var linkNextPage = CurrentPage != TotalPages ? CurrentPage + 1 : CurrentPage;
            AddPageModelToList("Siguiente", linkNextPage, linkNextEnable);
        }

        private void AddPageModelToList(string text, int page, bool enable)
        {
            Links.Add(new PageModel
            {
                Text = text,
                Page = page,
                Enable = enable
            });
        }

        class PageModel
        {
            public string Text { get; set; } = null!;
            public int Page { get; set; }
            public bool Enable { get; set; } = true;
            public bool Active { get; set; } = false;
        }
    }

